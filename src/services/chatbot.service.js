const { OpenAI } = require("openai");
const Sach = require("../models/sach.model");
const TacGia = require("../models/tacgia.model");
const NhaXuatBan = require("../models/nhaxuatban.model");
const LoaiSach = require("../models/loaisach.model");
const ChatLog = require("../models/chatlog.model");

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const sessions = {};

class ChatbotService {
  static async getResponse(message, MaDocGia) {
    const userMessage = message.toLowerCase();
    const history = sessions[MaDocGia] || [];
    // Chu·∫©n h√≥a ƒë·ªÉ so s√°nh
    const normalize = (str) =>
      (str || "")
        .toString()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .toLowerCase();
    const normalizedMessage = normalize(userMessage);
    // üëâ Ph√°t hi·ªán c√¢u h·ªèi v·ªÅ s·ªë l∆∞·ª£ng s√°ch trong th∆∞ vi·ªán
    if (
      normalizedMessage.includes("bao nhieu sach") ||
      normalizedMessage.includes("bao nhi√™u s√°ch") ||
      normalizedMessage.includes("tong so sach") ||
      normalizedMessage.includes("t·ªïng s·ªë s√°ch") ||
      normalizedMessage.includes("thu vien co bao nhieu") ||
      normalizedMessage.includes("c√≥ bao nhi√™u s√°ch")
    ) {
      const totalBooks = await Sach.countDocuments({});
      const reply = `üìö Th∆∞ vi·ªán hi·ªán c√≥ t·ªïng c·ªông kho·∫£ng **${totalBooks} ƒë·∫ßu s√°ch** kh√°c nhau. B·∫°n mu·ªën t√¨m s√°ch g√¨ c·ª• th·ªÉ kh√¥ng?`;

      // L∆∞u session + log
      history.push({ role: "user", content: userMessage });
      history.push({ role: "assistant", content: reply });
      sessions[MaDocGia] = history;

      await ChatLog.create({
        MaDocGia,
        question: userMessage,
        answer: reply,
      });

      return reply;
    }

    // L·∫•y t·∫•t c·∫£ t√™n s√°ch
    const allBooks = await Sach.find({}, "TenSach");
    let matchedBookTitles = [];

    for (let book of allBooks) {
      const bookName = normalize(book.TenSach);
      if (normalizedMessage.includes(bookName)) {
        matchedBookTitles.push(book.TenSach);
      }
    }
    // L·∫•y t·∫•t c·∫£ t√™n tac gi·∫£
    const allAuthors = await TacGia.find({}, "_id TenTG");
    let matchedAuthorNames = [];
    const allAuthorsId = [];
    for (let author of allAuthors) {
      const authorName = normalize(author.TenTG);
      if (normalizedMessage.includes(authorName)) {
        allAuthorsId.push(author._id);
        matchedAuthorNames.push(author.TenTG);
      }
    }
    // l·∫•y danh s√°ch nh√† xu·∫•t b·∫£n
    const allPublishers = await NhaXuatBan.find({}, "_id TenNXB");
    let matchedPublisherNames = [];
    const allPublishersId = [];
    for (let publisher of allPublishers) {
      const publisherName = normalize(publisher.TenNXB);
      if (normalizedMessage.includes(publisherName)) {
        allPublishersId.push(publisher._id);
        matchedPublisherNames.push(author.TenNXB);
      }
    }
    let query = {};

    if (matchedBookTitles.length > 0) {
      // N·∫øu t√¨m th·∫•y t√™n s√°ch n·∫±m trong c√¢u ng∆∞·ªùi d√πng
      query = { TenSach: { $in: matchedBookTitles } };
    } else if (matchedAuthorNames.length > 0) {
      // N·∫øu t√¨m th·∫•y t√™n t√°c gi·∫£ n·∫±m trong c√¢u ng∆∞·ªùi d√πng
      query = { TacGia: { $in: allAuthorsId } };
    } else if (matchedPublisherNames.length > 0) {
      // N·∫øu t√¨m th·∫•y t√™n nh√† xu·∫•t b·∫£n n·∫±m trong c√¢u ng∆∞·ªùi d√πng
      query = { MaNXB: { $in: allPublishersId } };
    }
    // T√¨m s√°ch
    const sachList = await Sach.find(query)
      .limit(5)
      .populate({ path: "TacGia" })
      .populate({ path: "MaNXB" })
      .populate({ path: "MaLoai" });
    //kiem tra c√≥ t√¨m ƒë∆∞·ª£c sahcs kh√¥ng
    console.log("üîç K·∫øt qu·∫£ t√¨m ƒë∆∞·ª£c:", sachList);

    const found = sachList.length > 0;

    let sachText = found
      ? sachList
          .map((s) => {
            let tacgia = "Kh√¥ng r√µ";
            if (Array.isArray(s.TacGia)) {
              tacgia = s.TacGia.map((t) => {
                const name = t.TenTG || "Kh√¥ng r√µ";
                const desc = t.MoTa ? ` (${t.MoTa})` : "";
                return name + desc;
              }).join(", ");
            } else if (s.TacGia?.TenTG) {
              tacgia = s.TacGia.TenTG;
              if (s.TacGia.MoTa) tacgia += ` (${s.TacGia.MoTa})`;
            }

            return `üìò M√¨nh t√¨m th·∫•y m·ªôt cu·ªën s√°ch ph√π h·ª£p: **"${s.TenSach}"**.
        T√°c gi·∫£: **${tacgia}**  
        Nh√† xu·∫•t b·∫£n: **${s.MaNXB?.TenNXB || "Kh√¥ng r√µ"} (ƒê·ªãa ch·ªâ ${
              s.MaNXB?.DiaChi || "Kh√¥ng r√µ"
            } )**  
        M√¥ t·∫£: **${s.MoTa || "Kh√¥ng r√µ"}**
        Th·ªÉ lo·∫°i: **${s.MaLoai?.TenLoai || "Kh√¥ng r√µ"}**, ph√°t h√†nh nƒÉm **${
              s.NamXuatBan
            }**.  
        Hi·ªán c√≤n **${
          s.SoQuyen - s.SoLuongDaMuon
        } cu·ªën** trong th∆∞ vi·ªán ƒë·ªÉ b·∫°n m∆∞·ª£n.`;
          })
          .join("\n\n---\n\n")
      : "Th∆∞ vi·ªán hi·ªán kh√¥ng c√≥ s√°ch ph√π h·ª£p.";
    if (
      !matchedBookTitles.length &&
      !matchedAuthorNames.length &&
      !matchedPublisherNames.length
    ) {
      sachText =
        "Hi·ªán ch∆∞a r√µ b·∫°n ƒëang c·∫ßn t√¨m lo·∫°i s√°ch n√†o c·ª• th·ªÉ. Tuy nhi√™n th∆∞ vi·ªán c√≥ nhi·ªÅu s√°ch thu·ªôc c√°c lƒ©nh v·ª±c nh∆∞ vƒÉn h·ªçc, c√¥ng ngh·ªá, khoa h·ªçc, l·ªãch s·ª≠,... B·∫°n c√≥ th·ªÉ h·ªèi r√µ h∆°n ƒë·ªÉ m√¨nh h·ªó tr·ª£ t·ªët h∆°n nh√©!";
    }

    // G·ª≠i cho GPT n·∫øu c·∫ßn ph·∫£n h·ªìi th√™m
    const messages = [
      {
        role: "system",
        content: `B·∫°n l√† tr·ª£ l√Ω AI cho th∆∞ vi·ªán Nh√¢n Nh·ª±t. Tr·∫£ l·ªùi d·ª±a **ch√≠nh x√°c v√†o d·ªØ li·ªáu s√°ch d∆∞·ªõi ƒë√¢y**, kh√¥ng t·ª± suy ƒëo√°n hay b·ªãa ƒë·∫∑t n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu.`,
      },
      {
        role: "system",
        content: `D·ªØ li·ªáu s√°ch t·ª´ th∆∞ vi·ªán:\n${sachText}`,
      },
      ...history.slice(-5),
      { role: "user", content: userMessage },
    ];

    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages,
    });

    const reply =
      completion.choices?.[0]?.message?.content ||
      "Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph·∫£n h·ªìi l√∫c n√†y.";

    // C·∫≠p nh·∫≠t session
    history.push({ role: "user", content: userMessage });
    history.push({ role: "assistant", content: reply });
    sessions[MaDocGia] = history;

    // Ghi l·∫°i log
    await ChatLog.create({
      MaDocGia,
      question: userMessage,
      answer: reply,
    });

    return reply;
  }
}
module.exports = ChatbotService;
